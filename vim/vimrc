" .vimrc

" {{{ vim-plug

call g:plug#begin('~/.vim/plugged')

" Better status line
Plug 'vim-airline/vim-airline'
Plug 'vim-airline/vim-airline-themes'

" ga for character descriptions
Plug 'tpope/vim-characterize'

" :Gdiff, :Gcommit, etc.
Plug 'tpope/vim-fugitive'

" Markdown syntax
Plug 'tpope/vim-markdown'

" Add support for github-style fenced codeblocks in markdown
Plug 'jtratner/vim-flavored-markdown'

" Syntax, linting, etc.
Plug 'w0rp/ale'

" Solarized theme
Plug 'altercation/vim-colors-solarized'

" Javascript syntax
Plug 'othree/yajs.vim', { 'for': 'javascript'}
Plug 'maxmellon/vim-jsx-pretty'

" JSON syntax highlighting
Plug 'elzr/vim-json'

" Comment with gc
Plug 'tpope/vim-commentary'

" Amazing mappings
Plug 'tpope/vim-unimpaired'

" Repeat things
Plug 'tpope/vim-repeat'

" JSON pretty printing with gqaj
Plug 'tpope/vim-jdaddy'

" Inline git status
Plug 'airblade/vim-gitgutter'

" Open current Markdown buffer in Marked2
Plug 'itspriddle/vim-marked'

" Better rainbow parens
Plug 'luochen1990/rainbow'

" iTerm2 and tmux integration
Plug 'sjl/vitality.vim'

" Lint vimscript with vint; requires vint: pip install vim-vint
Plug 'todesking/vint-syntastic'

" netrw improvements
Plug 'tpope/vim-vinegar'

" argument manipulation
Plug 'PeterRincker/vim-argumentative'

" manipulate delimiters
Plug 'tpope/vim-surround'

" even better (and consistent) fuzzy finding
Plug 'junegunn/fzf', { 'do': './install --bin --no-key-bindings --no-completion --no-update-rc' }
Plug 'junegunn/fzf.vim'

" async build tasks
Plug 'tpope/vim-dispatch'

" github integration
Plug 'tpope/vim-rhubarb'

" CoC.nvim LSP
Plug 'neoclide/coc.nvim', {'do': 'yarn install --frozen-lockfile'}
" And all the extensions I use
Plug 'neoclide/coc-sources', {'do': 'yarn install --frozen-lockfile'}
Plug 'neoclide/coc-json', {'do': 'yarn install --frozen-lockfile'}
Plug 'neoclide/coc-eslint', {'do': 'yarn install --frozen-lockfile'}
Plug 'neoclide/coc-tsserver', {'do': 'yarn install --frozen-lockfile'}
Plug 'neoclide/coc-html', {'do': 'yarn install --frozen-lockfile'}
Plug 'neoclide/coc-css', {'do': 'yarn install --frozen-lockfile'}
Plug 'neoclide/coc-highlight', {'do': 'yarn install --frozen-lockfile'}
Plug 'neoclide/coc-emmet', {'do': 'yarn install --frozen-lockfile'}
Plug 'iamcco/coc-tailwindcss',  {'do': 'yarn install --frozen-lockfile && yarn run build'}
Plug 'fannheyward/coc-pyright', {'do': 'yarn install --frozen-lockfile'}
Plug 'iamcco/coc-spell-checker', {'do': 'yarn install --frozen-lockfile'}
Plug 'bmatcuk/coc-stylelintplus', {'do': 'yarn install --frozen-lockfile'}
Plug 'josa42/coc-sh', {'do': 'yarn install --frozen-lockfile'}

" Prose
Plug 'junegunn/goyo.vim'
Plug 'junegunn/limelight.vim'

" Prettier integration
Plug 'prettier/vim-prettier', {
  \ 'do': 'yarn install',
  \ 'for': ['javascript', 'typescript', 'css', 'less', 'scss', 'json', 'graphql', 'markdown', 'vue', 'yaml', 'html', 'mdx'] }

" Project config and alternate files
Plug 'tpope/vim-projectionist'

" Use sensible defaults (loads after this config, so some config is probably duplicated)
Plug 'tpope/vim-sensible'

" GraphQL syntax highlighting
Plug 'jparise/vim-graphql'

" Emmet snippet expansion
Plug 'mattn/emmet-vim'

" Path additions for a number of languages including Javascript
Plug 'tpope/vim-apathy'

call g:plug#end()

" }}}
" {{{ Setup

" Set the terminal font encoding
if &encoding ==# 'latin1' && has('gui_running')
  set encoding=utf-8
  scriptencoding utf-8
  set termencoding=utf-8
endif

" Manage multiple buffers
set hidden

" Map leader to <space>
let g:mapleader = ' '
let g:maplocalleader = ' '

" More frequent updates for, e.g. signs.
set updatetime=750

" Always show the signcolumn, otherwise it would shift the text each time
" diagnostics appear/become resolved.
if has('patch-8.1.1564')
  " Recently vim can merge signcolumn and number column into one
  set signcolumn=number
else
  set signcolumn=yes
endif

" }}}
" {{{ Airline
let g:airline_theme = 'solarized'

" No separators between sections
let g:airline_left_sep = ''
let g:airline_right_sep = ''

if !exists('g:airline_symbols')
    let g:airline_symbols = {}
endif
let g:airline_symbols.whitespace = 'Ξ'
let g:airline_symbols.readonly = '∅'

" Modified theme
" * status same color as tab line
" * inactive bg different than status and ruler
function! g:AirlineThemeModified(palette)
    if g:airline_theme ==? 'solarized'
        let a:palette.normal_modified.airline_c =  ['#eee8d5', '#b58900', 254, 136, 'bold']
        let a:palette.insert_modified.airline_c =  ['#eee8d5', '#b58900', 254, 136, 'bold']
        let a:palette.visual_modified.airline_c =  ['#eee8d5', '#b58900', 254, 136, 'bold']
        let a:palette.inactive_modified.airline_c =['#b58900', '', 136, '', 'bold']

        for l:colors in values(a:palette.inactive)
            let l:colors[2] = 241
            let l:colors[3] = 235
        endfor
    endif
endfunction
let g:airline_theme_patch_func = 'g:AirlineThemeModified'

" Enable buffers and numbers in the tab bar
let g:airline#extensions#tabline#enabled = 1
let g:airline#extensions#tabline#buffer_nr_show = 0
let g:airline#extensions#tabline#buffer_min_count = 2
let g:airline#extensions#tabline#formatter = 'unique_tail_improved'
let g:airline#extensions#tabline#buffers_label = ''

" No need for mode (or crypt, paste, iminsert, etc.) because of showmode
" No need for file encoding
let g:airline#extensions#default#layout = [
    \ [ 'b', 'c' ],
    \ [ 'x', 'z', 'error', 'warning']
\ ]

" Enable ALE status
let g:airline#extensions#ale#enabled = 1
" }}}
" {{{ ALE
" Be explicit about languages I care about
let g:ale_linters = {
\   'javascript': ['eslint'],
\   'python': ['flake8'],
\   'vim': ['vint'],
\   'scss': []
\}

" Be explicit about fixers
let g:ale_fixers = {
\   'javascript': ['eslint']
\}

" Fix on save, like Prettier
let g:ale_fix_on_save = 1

" Ignore specific flake8 errors and warnings
let g:ale_python_flake8_options = '--ignore="E501,E302,E261,E701,E241,E126,E127,E128,E121,W801"'

" Better sign symbols
let g:ale_sign_error = '✗'
let g:ale_sign_warning = '!'
let g:ale_sign_style_error = '☡'
let g:ale_sign_style_warning = '¡'

" Always show the sign column
let g:ale_sign_column_always = 1

nmap <leader>ln <Plug>(ale_next_wrap)
nmap <leader>lp <Plug>(ale_previous_wrap)
" }}}
" {{{ Autocommands
if has('autocmd')
    " Clear existing autocommands before defining them, in case this file is loaded again
    autocmd!

    augroup last_cursor
        autocmd!

        " Jump to last cursor position unless it's invalid or in an event handler or
        " a git commit
        autocmd BufReadPost *
          \ if &filetype !~ '^git\c' && line("'\"") > 0 && line("'\"") <= line('$') |
          \   exe 'normal! g`"' |
          \ endif
    augroup END

    augroup cursor_highlight
        autocmd!

        " Only show cursorline in active windows
        autocmd WinLeave * set nocursorline colorcolumn=""
        autocmd WinEnter * set cursorline colorcolumn=+1
    augroup END

    augroup markdown
        autocmd!

        " Automatically use github-flavored markdown
        autocmd BufNewFile,BufRead *.md,*.markdown setlocal filetype=ghmarkdown

        autocmd User GoyoEnter Limelight
        autocmd User GoyoLeave Limelight!
        autocmd FileType markdown Goyo 110
    augroup END

    augroup golang
        autocmd!

        autocmd FileType go setlocal noexpandtab
    augroup END

    augroup groovy
        autocmd!

        au BufReadPost Jenkinsfile set syntax=groovy
        au BufReadPost Jenkinsfile set filetype=groovy
    augroup END

    augroup json
      autocmd!

      autocmd FileType json setlocal foldmethod=syntax
    augroup END
endif

" }}}
" {{{ Backups
" Skip backup entirely. It's annoying.
set nobackup
if has('writebackup')
    set nowritebackup
endif

" }}}
" {{{ Commands
" Note that these options don't really matter when using vim-airline.
if has('cmdline_info')
    " Show command information in the status
    set showcmd

    " Show which mode we're in
    set showmode
endif

" }}}
" {{{ Diff
set diffopt+=vertical,algorithm:histogram,indent-heuristic
" }}}
" {{{ Folding
" Fold with triple curly braces, fill with spaces
if has('folding')
    set nofoldenable
    set foldmethod=marker
    set foldopen=hor,search,tag,undo
    set fillchars=diff:\ ,fold:\ ,vert:\
endif

" }}}
" {{{ Formatting
" Show matching braces
set showmatch

" Spacing and tabbing
" Spaces
set expandtab

" Tab width
set tabstop=2
set softtabstop=2
set shiftwidth=2

set textwidth=100

" Don't wrap text
set nowrap

" But if prose *is* wrapped with linebreak, make it look good
if has('linebreak')
    set breakindent
    let &showbreak = '» '
    set cpoptions+=n
end

" Highlight the first column after the text width
if exists('&colorcolumn')
    set colorcolumn=+1
endif

" From the Vim docs:
" t   Auto-wrap text using textwidth
"
" c   Auto-wrap comments using textwidth, inserting the current comment
"     leader automatically.
"
" r   Automatically insert the current comment leader after hitting
"     <Enter> in Insert mode.
"
" o   Automatically insert the current comment leader after hitting 'o' or
"     'O' in Normal mode.
"
" n   When formatting text, recognize numbered lists.  This actually uses
"     the 'formatlistpat' option, thus any kind of list can be used.  The
"     indent of the text after the number is used for the next line.  The
"     default is to find a number, optionally followed by '.', ':', ')',
"     ']' or '}'.  Note that 'autoindent' must be set too.  Doesn't work
"     well together with "2".
"     Example:
"         1. the first item
"            wraps
"         2. the second item
set formatoptions+=t,c,r,o,n

" Use only 1 space after "." when joining lines instead of 2
set nojoinspaces

augroup vimrc
    autocmd!

    autocmd FileType xhtml,xml,html set textwidth=0
    autocmd FileType make set noexpandtab tabstop=8 softtabstop=8 shiftwidth=8
    autocmd FileType markdown set textwidth=0 wrapmargin=0 wrap linebreak tabstop=4 softtabstop=4 shiftwidth=4
    autocmd FileType clojure set tabstop=2 softtabstop=2 shiftwidth=2
    autocmd FileType yaml set tabstop=2 softtabstop=2 shiftwidth=2
    autocmd FileType javascript set tabstop=2 softtabstop=2 shiftwidth=2
    autocmd FileType json set tabstop=2 softtabstop=2 shiftwidth=2
    autocmd FileType groovy set tabstop=4 softtabstop=4 shiftwidth=4
augroup END

" }}}
" {{{ fzf
let g:fzf_colors =
\ { 'fg':      ['fg', 'Normal'],
  \ 'bg':      ['bg', 'Normal'],
  \ 'hl':      ['fg', 'Comment'],
  \ 'fg+':     ['fg', 'CursorLine', 'CursorColumn', 'Normal'],
  \ 'bg+':     ['bg', 'CursorLine', 'CursorColumn'],
  \ 'hl+':     ['fg', 'Statement'],
  \ 'info':    ['fg', 'PreProc'],
  \ 'prompt':  ['fg', 'Conditional'],
  \ 'pointer': ['fg', 'Exception'],
  \ 'marker':  ['fg', 'Keyword'],
  \ 'spinner': ['fg', 'Label'],
  \ 'header':  ['fg', 'Comment'] }

nnoremap <silent> <leader><leader> :Files<cr>
nnoremap <silent> <leader><Enter> :Buffers<cr>

" Files command with preview window
command! -bang -nargs=? -complete=dir Files
  \ call fzf#vim#files(<q-args>, fzf#vim#with_preview(), <bang>0)

" Ripgrep with preview
" :Rg --type py PATTERN
" :Rg! --no-ignore PATTERN DIR
command! -bang -nargs=* Rg
  \ call fzf#vim#grep(
  \   'rg --vimgrep --color=always --smart-case '.<q-args>, 1,
  \   <bang>0 ? fzf#vim#with_preview('up:60%')
  \           : fzf#vim#with_preview('right:50%'),
  \   <bang>0)
nnoremap <silent> <leader>rg :Rg<space>

" }}}
" {{{ git-gutter
" Escape grep so we don't have color codes
let g:gitgutter_escape_grep = 1

" Ignore whitespace (we have other plugins for that)
let g:gitgutter_diff_args = '-w'

" Don't map any keys by default
let g:gitgutter_map_keys = 0

" Re-add some useful mappings
nmap ]h <Plug>(GitGutterNextHunk)
nmap [h <Plug>(GitGutterPrevHunk)
nmap <leader>ha <Plug>(GitGutterStageHunk)
nmap <leader>hr <Plug>(GitGutterRevertHunk)
nmap <leader>hd <Plug>(GitGutterPreviewHunk)

" Map hunk objects to ih and ah
omap ih <Plug>(GitGutterTextObjectInnerPending)
omap ah <Plug>(GitGutterTextObjectOuterPending)
xmap ih <Plug>(GitGutterTextObjectInnerVisual)
xmap ah <Plug>(GitGutterTextObjectOuterVisual)

" }}}
" {{{ History
" Command history
set history=1000

" }}}
" {{{ Key remaps
" Completion
inoremap <C-space> <C-X><C-P>

" Edit and source this file
nmap <silent> <leader>ev :split $MYVIMRC<CR>
nmap <silent> <leader>sv :source $MYVIMRC<CR>

" Annoyances

" No arrow keys
inoremap <up> <nop>
inoremap <down> <nop>
inoremap <left> <nop>
inoremap <right> <nop>
nnoremap <up> <nop>
nnoremap <down> <nop>
nnoremap <left> <nop>
nnoremap <right> <nop>

" Bind dumb uppercase commands to their useful lowercase equivalents
if has('user_commands')
    command! -bang E e<bang>
    command! -bang Q q<bang>
    command! -bang W w<bang>
    command! -bang QA qa<bang>
    command! -bang Qa qa<bang>
    command! -bang Wa wa<bang>
    command! -bang WA wa<bang>
    command! -bang Wq wq<bang>
    command! -bang WQ wq<bang>
endif

" Make Y act like other uppercase commands
nnoremap Y y$

" Disable going to Ex mode
noremap Q <nop>

" Remove annoying F1 help; use :help instead
noremap <F1> <nop>

" Shortcuts for diff
nnoremap <leader>dg :diffget<cr>
nnoremap <leader>dp :diffput<cr>
" }}}
" {{{ Line Numbers
" Show line numbers
set number
if exists('&relativenumber')
    set relativenumber
endif

" }}}
" {{{ List
" Toggle invisibles, hide by default
set nolist
set listchars=tab:⇥\ ,trail:·,eol:¬,extends:❯,precedes:❮,nbsp:_
nnoremap <leader>l :set list!<CR>

" }}}
" {{{ Markdown
" Explicit syntax highlighting for fenced code blocks in markdown
let g:markdown_fenced_languages = ['javascript', 'html', 'python', 'bash=sh']

" }}}
" {{{ Messages
" Shorten a lot of notifications and suppress the splash screen
set shortmess+=aI

" }}}
" {{{ Prettier
" Don't require the pragma to format
let g:prettier#autoformat_require_pragma = 0

" Format if a config is present
let g:prettier#autoformat_config_present = 1

" Run the formatting async
let g:prettier#exec_cmd_async = 1

" Show the errors in quickfix but don't focus it
let g:prettier#quickfix_auto_focus = 0

" }}}
" {{{ Prose
let g:limelight_conceal_ctermfg = 240
let g:limelight_paragraph_span = 1

let g:goyo_width = 110

" }}}
" {{{ Rainbow
let g:rainbow_active = 1
" }}}
" {{{ Ripgrep
set grepprg =rg\ --vimgrep\ $*

" }}}
" {{{ Scrolling
" Scrolling context; lines/columns of buffer while scrolling
if !&scrolloff
  set scrolloff=3
endif
if !&sidescrolloff
  set sidescrolloff=5
endif

" Scrolling speed
nnoremap <C-e> 5<C-e>
nnoremap <C-y> 5<C-y>

" }}}
" {{{ Search
if has('extra_search')
    " Highlight searches
    set hlsearch

    " Be smart about searching case-sensitively
    set smartcase
    set ignorecase

    " Wrap around the file when searching
    set wrapscan
endif

" }}}
" {{{ Spelling
if has('spell')
    set spelllang=en_us
endif

" }}}
" {{{ Splits

" Intuitive split locations
set splitright
set splitbelow

augroup helpfiles
    autocmd!

    " Always open help in vertical split
    autocmd vimrc FileType help wincmd L
augroup END

" }}}
" {{{ Swap
" Turn swap off
set noswapfile
set updatecount=0

" }}}
" {{{ Terminal

" Better redrawing for large files
set ttyfast

" Disable the vbell
set visualbell t_vb=

" }}}
" {{{ Text Objects
" Line
xnoremap il g_o^
onoremap il :normal vil<CR>
xnoremap al $o0
onoremap al :normal val<CR>
" }}}
" {{{ Undo
" -- see http://amix.dk/blog/post/19548
if has('persistent_undo')
    set undodir=~/.vim/undodir
    set undofile

    " max changes that can be undone
    set undolevels=1000

    " max lines to save for undo on buffer reload
    set undoreload=10000
endif

" }}}
" {{{ Utility
" Respect vim modelines
set modeline

" Use the file's name in the title
set title

" Highlight the line the cursor is on
set cursorline

" Reuse open buffers and tabs
set switchbuf=useopen,usetab

" }}}
" {{{ Wildmenu
if has('wildmenu')
    " Bash-like tab completion for commands
    set wildmode=longest:list
    set wildchar=<Tab>
    if has('wildignore')
        set wildignore+=*.a,*.o,*.pyc,.DS_Store
        set wildignore+=*.bmp,*.gif,*.ico,*.jpg,*.png
        set wildignore+=*~,*.swp,*.tmp
    endif
    if exists('&wildignorecase')
        set wildignorecase
    endif
endif

" }}}
" {{{ Windows
" Keep window sizes when opening and closing windows
set noequalalways

" }}}
" {{{ CoC.nvim
" List extensions that can't be managed with vim-plug
let g:coc_global_extensions = ['coc-syntax', 'coc-dictionary', 'coc-swagger']

" Confirm first item with <cr>
inoremap <silent><expr> <cr> pumvisible() ? coc#_select_confirm() : "\<C-g>u\<CR>"

" Rename symbol under cursor
nmap <leader>rn <Plug>(coc-rename)

" Code navigation.
nmap <silent> gd <Plug>(coc-definition)
nmap <silent> gy <Plug>(coc-type-definition)
nmap <silent> gi <Plug>(coc-implementation)
nmap <silent> gr <Plug>(coc-references)

" Applying codeAction to the selected region.
" Example: `<leader>aap` for current paragraph
xmap <leader>a  <Plug>(coc-codeaction-selected)
nmap <leader>a  <Plug>(coc-codeaction-selected)

" Remap keys for applying codeAction to the current buffer.
nmap <leader>ac  <Plug>(coc-codeaction)
" Apply AutoFix to problem on the current line.
nmap <leader>af  <Plug>(coc-fix-current)

" Add :Swagger to call coc-swagger render
command -nargs=0 Swagger :CocCommand swagger.render

" {{{ Epilogue
" Turn syntax on after everything else
syntax on

" {{{ Colors
if $ITERM_PROFILE =~? 'light'
    set background=light
else
    set background=dark
endif

let g:solarized_termtrans = 1
let g:solarized_underline = 0
silent! colorscheme solarized

hi Folded term=standout ctermfg=3 ctermbg=NONE

highlight link SignColumn LineNr
highlight link GitGutterAdd DiffAdd
highlight link GitGutterChange DiffChange
highlight link GitGutterDelete DiffDelete
highlight link GitGutterChangeDelete DiffDelete

" }}}
" }}}
